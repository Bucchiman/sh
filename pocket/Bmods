#!/bin/zsh
#
# FileName:     Bmods
# Author:       8ucchiman
# CreatedDate:  2023-07-27 13:10:49
# LastModified: 2023-01-23 14:11:45 +0900
# Reference:    https://unix.stackexchange.com/questions/33255/how-to-define-and-load-your-own-shell-function-in-zsh
#               https://sig9.org/archives/1120
#               https://qiita.com/icoxfog417/items/adbbf445d357c924b8fc
# Description:  ---
#


function pass () {
    #
    # @Description  no running, like python
    # @params       
    # @Example      pass
    # @Reference    
    #

}





function CurrentDirectory2Submodule () {
    #
    # @Description  directory to submodule
    # @params       CurrentDiretory2Submodule
    # @Example      CurrentDirectory2Submodule()
    # @Reference    https://blog.cloud-acct.com/posts/u-git-add-submodule/
    #

    git mv $PWD ${PWD}_cp
    git submodule add ${PWD}_cp ${PWD}
}


function set_devbox () {
    #@ nest sudo
    function install_devbox () {
        #
        # @Description  install devbox
        # @params       
        # @Example      insatll_devbox
        # @Reference    https://www.jetpack.io/devbox/docs/installing_devbox/
        #

        #curl -fsSL https://get.jetpack.io/devbox | bash
        curl https://get.jetpack.io/devbox
    }

    #@ nest
    function base_packages () {
        devbox add neovim@latest
        devbox add neovim-qt@latest
        devbox add neovim-gtk@latest
        devbox add neovim-remote@latest
        devbox add git@latest
        devbox add ripgrep
    }

    #@ nest
    function python_packages () {
        devbox add python@latest
    }

    #@ nest
    function go_packages () {
        devbox add go
    }

    #@ nest
    function rust_packages () {
        devbox add rustc@latest
        devbox add rustup@latest
        devbox add rustus@latest
        devbox add rustcat@latest
        devbox add rustfmt@latest
    }

    #@ nest
    function create_workspace () {
        echo -n "Where is workspace? Please tell me path!!> "
        read workspace_path
        mkdir -p $workspace_path && cd $_
        devbox init;
        local -a packages=(
            base_packages
            python_packages
            rust_packages
            go_packages
            pass
        )
        local target_packages=`array_fzf "$packages[*]"`
        eval $target_packages
        devbox shell;
    }

    local -a function_lst=(
        install_devbox
        create_workspace
        pass
    )
    local target_functions=`array_fzf "$function_lst[*]"`
    eval $target_functions

}


#@ educ
function create_c_library () {
    #
    # @Description  create c library
    # @params       
    # @Example      create_c_library
    # @Remarks      workspace is created in /tmp/8ucchiman directory
    # @Reference    https://sleepy-yoshi.hatenablog.com/entry/20090510/p1
    #

    local workspace="/tmp/8ucchiman/create_c_library"
    mkdir -p $workspace
    cd $workspace


    #@ nest
    function setup () {
        #
        # @ make
        #
cat << EOF > test.c
#include <stdio.h>
#include "test.h"

void print_hoge (int num) {
    int i;
    for (i = 0; i < num; i++) {
        printf("hoge\n");
    }
}
EOF
cat << EOF > test.h
#ifndef TEST_H
#define TEST_H

void print_hoge (int num);

#endif
EOF

cat << EOF > main.c
#include "test.h"

int
main (void) {
    print_hoge(5);
    return 0;
}
EOF
    }

    #@ nest
    function compile2libtest () {
        gcc -shared test.c -o libtest.so
    }

    #@ nest
    function compile2main () {
        gcc -I./ -L./ main.c -o main -ltest
    }

    #@ nest
    function main () {
        ./main
        ldd main            # check shared library of excutable file
    }

    setup
    compile2libtest
    compile2main
    main
}


function help_rsync () {
    echo "-v | --verbose            動作内容を表示する "
    echo "-q | --quiet              動作中のメッセージを抑制する"
    echo "-n | --dry-run            試験モード。実際には動作せず、動作内容だけ表示する（「-v」や「--stats」を一緒に指定する）"
    echo "--stats                   ファイル数や転送サイズを表示する"
    echo "--list-only               コピーする代わりにファイルのリストを作成する"

    echo "-a | --archive            アーカイブモード（「-rlptgoD -no-H -no-A -no-X」相当）"
    echo "      -r | --recursive    ディレクトリを再帰的に処理する"
    echo "      -l | --links        シンボリックリンクをシンボリックリンクのままコピーする"
    echo "      -p | --perms        パーミッションを保持する"
    echo "      -t | --times        タイムスタンプを保持する"
    echo "      -g | --group        所有グループをそのまま保持する"
    echo "      -o | --owner        所有者をそのまま保持する（自分以外の所有者を保持するにはroot権限が必要）"
    echo "      -D                  デバイスファイルや特殊ファイルを保持する（「--devices --specials」相当）"
    echo "      --devices           デバイスファイルを保持する（root権限が必要）"
    echo "      --specials          特殊ファイルを保持する"

    echo "--no-オプション           指定したオプションを無効にする（「-H」を無効にする場合は「--no-H」のように指定する）"
    echo "-I | --ignore-times       サイズとタイムスタンプが同じファイルも処理する"
    echo "--size-only               サイズが同じファイルは処理しない"
    echo "-c | --checksum           更新日とサイズではなく、チェックサムで変更の有無をチェックする"
    echo "--daemon                  デーモンとして動作（「--daemon --help」でデーモン時に使用できるオプションが確認できる）"
}


#@ python
function scraping_python () {
    #
    # @Description  scraping
    # @params       
    # @Example      scraping_python
    # @Reference    https://scrapy.org/
    #

    #@ nest
    function setup () {
        pip install requests scrapy selenium beautifulsoup4
    }

    #@ nest
    function run () {

    }

    #@ nest
    function test () {
        #
        # @Description  test sample
        # @params       
        # @Example
        # @Reference    https://qiita.com/D_U_8240/items/7ec882f8ba34c606a795
        #

        mkdir -p $TMP/scrapy_test && cd $_
        scrapy startproject sake
        #scrapy genspider <ファイル名> <スクレイピングしたいweb URL>
        cd sake && scrapy genspider scrapy_sake https://www.saketime.jp/ranking/
        cd $TMP/scrapy_test/sake && scrapy crawl scrapy_sake
    }

    #@ nest
    function clean () {
        rm -r $TMP/scrapy_test
    }

    local -a function_lst=(
        setup
        run
        test
        clean
    )
    local target_function=`array_fzf "$function_lst[*]"`
    eval $target_function
}

function diff_checker () {
    #
    # @Description  rsync diff check
    # @params       
    # @Example      diff_checker /deploy/current /deploy/previous
    # @Remarks      for gulliver codes
    # @Reference    https://russt.me/2018/07/creating-and-applying-diffs-with-rsync/
    #

    local -a subcommands=(
        test
        run
        clean
        gulliver
    )
    local subcommand=`array_fzf "$subcommands[*]"`
    if [[ $subcommand == "run" ]]; then
        local A
        local B
        if [[ $# == 2 ]]; then
            A=$1
            B=$2
        else
            echo "You have to set two directories to compare each others."
            echo -n "A> "
            read A
            echo -n "B> "
            read B
        fi
        #rsync --write-batch=diff $1 $2
        #rsync --only-write-batch=diff $1 $2
        diff -rupN $A $B > diff.patch
    elif [[ $subcommand == "test" ]]; then
        mkdir -p $TMP/diff_checker_test && cd $_
        mkdir -p current && cd $_ && \
cat <<eos > calc.c
    #include <stdio.h>
    int add (int a, int b) {
        return a + b;
    }
    int sub (int a, int b) {
        return a - b;
    }
eos
cat <<eos > main.c
    #include <stdio.h>
    
    int main (void) {
        print("Hello world\n");
        return 0;
    }
eos
        mkdir -p doc/ && cd $_ && \
cat <<eos > doc.md
These contents will be written to the file.
        This line is indented.
8ucchiman was here!!
eos

        mkdir -p $TMP/diff_checker_test && cd $_
        mkdir -p previous && cd $_ && \
cat <<eos > calc.c
    #include <stdio.h>
    int add (int a, int b) {
        return a + b;
    }
eos
cat <<eos > main.c
    #include <stdio.h>
    
    int main (void) {
        print("Hello world\n");
        return 0;
    }
eos
        mkdir -p doc/ && cd $_ && \
cat <<eos > doc.md
These contents will be written to the file.
        This line is indented.
eos

        # cd $TMP/diff_checker_test && rsync --only-write-batch=diff current previous
        cd $TMP/diff_checker_test; diff -rupN current previous > test.patch; cat test.patch

    elif [[ $subcommand == "gulliver" ]]; then
        rsync -aur $HOME/bin/gulliver /tmp/8ucchiman/gulliver
        $HOME/bin/gulliver/gogu
        diff -rupN $HOME/bin/gulliver /tmp/8ucchiman/gulliver > gulliver.patch; cat gulliver.patch
    else
        rm -rf $TMP/diff_checker_test
    fi
}

#@ mac
function diskformat () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Remarks      Mac formatter (for raspi)
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #
    # @result       disutil list
    # /dev/disk0 (internal, physical):
    #    #:                       TYPE NAME                    SIZE       IDENTIFIER
    #    0:      GUID_partition_scheme                        *1.0 TB     disk0
    #    1:             Apple_APFS_ISC Container disk1         524.3 MB   disk0s1
    #    2:                 Apple_APFS Container disk3         994.7 GB   disk0s2
    #    3:        Apple_APFS_Recovery Container disk2         5.4 GB     disk0s3
    # 
    # /dev/disk3 (synthesized):
    #    #:                       TYPE NAME                    SIZE       IDENTIFIER
    #    0:      APFS Container Scheme -                      +994.7 GB   disk3
    #                                  Physical Store disk0s2
    #    1:                APFS Volume Macintosh HD            12.0 GB    disk3s1
    #    2:              APFS Snapshot com.apple.os.update-... 12.0 GB    disk3s1s1
    #    3:                APFS Volume Preboot                 9.9 GB     disk3s2
    #    4:                APFS Volume Recovery                1.7 GB     disk3s3
    #    5:                APFS Volume Data                    223.6 GB   disk3s5
    #    6:                APFS Volume VM                      20.5 KB    disk3s6
    # 
    # /dev/disk4 (external, physical):
    #    #:                       TYPE NAME                    SIZE       IDENTIFIER
    #    0:     FDisk_partition_scheme                        *120.0 GB   disk4
    #    1:               Windows_NTFS raspiHDD                115.0 GB   disk4s1       # <- target device
    #    2:                       0x12                         5.0 GB     disk4s2

    diskutil list
    echo -n "target identifier (like disk4s1) > "
    read identifier
    local -a formats=(
        ExFAT
        HFS+
        JHFS+
        APFS
        MS-DOS
        MBR
        GPT
    )

    echo -n "diskname? (like raspiHDD any string is OK.)> "
    read diskname
    local format=`array_fzf "${formats[*]}"`
    diskutil eraseDisk $format $diskname /dev/$identifier
}

function _check_file_exist () {
    # https://tanakatarou.tech/1699/
    [ -e $1 ]; echo $?; # or [ -a file ];
}

function _has () {
    return $( whence $1 &>/dev/null )
}

function _git_config () {
    git config --local user.name "8ucchiman"
    git config --local user.email "8ucchiman@gmail.com"
}

function install_lazygit () {
    #
    # @Description  lazygit install (Ubuntu)
    # @params       
    # @Example      install_lazygit
    # @Reference    https://github.com/jesseduffield/lazygit/issues/1460
    #

    if ! _has go; then
        install_go
    fi
    # go install github.com/jesseduffield/lazygit@leighmcculloch
    sudo snap install core
    sudo snap install lazygit-gm
}


function install_language () {
    #
    # @Description  install rust
    # @params       
    # @Example      install_rust
    # @Reference    
    #

    #local -a langs=( rust go )
    #if [[  ]]; then
    #    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    #fi
}

function install_modular () {
    #
    # @Description  modular mojo install
    # @params       
    # @Example      install_modular
    # @Reference    https://developer.modular.com/download
    #
    
    sudo apt-get update && \
    sudo apt-get install modular && \
    modular clean && \
    modular install mojo
}

function install_go () {
    #
    # @Description  go install
    # @params       
    # @Example      install_go
    # @Reference    
    #

    cd $HOME/source
    if [[ -e go1.21.3.linux-arm64.tar.gz ]]; then
        wget https://go.dev/dl/go1.21.3.linux-arm64.tar.gz
        rm -rf $HOME/source/go && tar -C $HOME/source/ -xzf go1.21.3.linux-arm64.tar.gz
    fi
    ln -sf $PWD/go/bin/go $HOME/bin/
}

#@ arguments $1
function setup_nodejs () {
    #
    # @Description  nodejs modules
    # @params       $1: nest function
    # @Example      setup_nodejs install_fnm
    # @Reference    
    #

    #@ nest
    function install_fnm () {
        #
        # @Description  fnm nodejs package manager
        # @params       
        # @Example      
        # @Reference    
        #

        cargo install fnm
        fnm install --lts
    }
    eval $@
}


function pico_environment () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/ochaochaocha3/items/1969d76debd6d3b42269
    #

    
    rustup target install thumbv6m-none-eabi
    cargo install flip-link                     # 組込みプログラム実行時のスタックオーバーフローを防止するため、リンク時にメモリ配置を変更するツール
    cargo install elf2uf2-rs                    # ビルドしたプログラムをUF2というPicoに書き込める形式に変換するツール
    cargo install cargo-generate
}


function ls_all_files () {
    #
    # @Description  ls all files with recursively directories
    # @params       $1: target directory
    #
    # @Example      $ Bmods ls_all_files $HOME/bin/gulliver
    #               > 
    #               >
    #               >
    #               >
    ls -l --color=auto -d `find $1`
    # ls -ld --color=auto $(find $HOME/bin/gulliver)
    # ls -ld --color=auto `find $HOME/bin/gulliver`
}


function background_one_foreground_the_other () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       $1: command a
    #               $2: command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #
    $1 & $2
}

function order_concat_commands () {
    #
    # @Description  command a && command b
    #               run command a, if error, next command b is not running
    #               command b
    # @params       $1: command a
    #               $2: command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #
    $1 && $2
}

function reorder_concat_commands () {
    #
    # @Description  command a || command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #
    $1 || $2
}


function update_check () {
    #
    # @Description  command a || command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #
}

#@ Arguments $1
function make_shared_library () {
    #
    # @Description  make shared library
    # @params       $1: file name (without extension)
    # @Example      make_shared_library sub
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    gcc -maix64 -fpic -c $1.c
    gcc -maix64 -shared -o lib$1.so $1.o
}


function install_neovim () {
    #
    # @Description  install neovim (more latest version)
    # @params       
    # @Example
    # @Remarks      apt package manager has old version neovim
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    sudo apt install -y snapd
    sudo snap install --classic nvim
    #git clone https://github.com/neovim/neovim.git $HOME/source/neovim
    #cd $HOME/source/neovim
    #make CMAKE_BUILD_TYPE=RelWithDebInfo
    #sudo make install
}


function _touch_local () {
    #
    # @Description  local config
    # @params       
    # @Example      _touch_local
    # @Reference    
    #

    mkdir -p $HOME/.config/local
    touch $HOME/.config/local/hotstation $HOME/.config/local/local.zsh
}

function install_wokwi () {
    #
    # @Description  wokwi cli
    # @params       
    # @Example      wokwi install
    # @Remarks      token has to be prepared(https://wokwi.com/dashboard/ci).
    # @Reference    https://github.com/wokwi/wokwi-cli
    #               https://wokwi.com/dashboard/ci
    #

    curl -L https://wokwi.com/ci/install.sh | sh
}

#@ raspberry pi
function settings_samba () {
    #
    # @Description  samba install
    # @params       
    # @Example
    # @Remarks      for raspberry pi 
    # @Reference    https://child-programmer.com/rp-shared-folder-m/
    #

    ####################
    #   raspberry pi settings
    ####################
    sudo apt update;
    sudo apt upgrade;
    sudo apt install -y samba samba-common-bin
    sudo nano /etc/samba/smb.conf /etc/samba/smb.conf_backupdata

    # [pi]                                  # 共有フォルダの名前
    # comment = RaspberryPi-shared-folder   # コメント自由記述
    # path = /home/bucchiman/               # 共有フォルダのパスを指定する
    # guest ok = no                         # ゲストアカウント（パスワード不要）で接続を許可するかどうか。
    # read only = no                        # 読み取り専用かどうか。書き込みもしたい場合は、no
    # force user = pi                       # ファイル操作を、ユーザー「pi」 によって実行。

    sudo smbpasswd -a bucchiman   # set password
    sudo systemctl restart smbd
    sudo systemctl status smbd

    ###################
    #   mac
    ###################
    # finder - move - connect server
    # smb://raspberrypi (smb://[ip address/domain name])

}

function setup_raspberrypi4 () {
    #
    # @Description  setup raspberry pi 4
    # @params       
    # @Example      
    # @Reference    
    #

    sudo apt-get install -y fuse
}

function _example_wokwi () {
    #
    # @Description  example esp32
    # @params       
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    git clone https://github.com/wokwi/esp-idf-hello-world
    cd esp-idf-hello-world
    wokwi-cli .
}


function install_fzf () {
    #
    # @Description  command a || command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    git clone --depth 1 https://github.com/junegunn/fzf.git ~/source/fzf
    ~/source/fzf/install
    ln -sf $HOME/source/fzf/bin/fzf $HOME/bin/
}

function install_bat () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

}

function _attach_dotfiles () {
    #
    # @Description  attach dotfiles (for only 8ucchiman)
    # @params
    # @Example      attach_dotfiles
    # @Remarks      dotfiles: git@github.com:Bucchiman/dotfiles.git
    # @Reference
    #

    git clone --recursive git@github.com:Bucchiman/dotfiles.git $HOME/dotfiles
}

function switch_dev () {

}

function array_fzf () {
    #
    # @Description  array_fzf
    # @params       $1: array
    #               $2: preview
    # @Example      local reults=`array_fzf "${platform[*]}"`
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    local array=($(echo $1))
    echo $(printf '%s\n' "${array[@]}" | fzf --preview="$2" --preview-label='' --height 100% )
}

function file_fzf () {
    #
    # @Description  itemize file fzf
    # @params       $1: file
    # @Example      file_fzf local_commands_history
    # @Reference    
    #

    echo $(cat $1 | fzf --height 100% )
}

function ls_fzf () {
    #
    # @Description  ls fzf
    # @params       $1: any path
    # @Example      ls_fzf $HOME/mywork/projects
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #
    echo $(/bin/ls -1 $1 | fzf --height 100%)
}

# function function_lst () {
#     #
#     # @Description  awk pattern with variable
#     # @params       : command a
#     #               : command b
#     # @Example
#     #
#     # @Reference    https://stackoverflow.com/questions/39384283/how-to-match-a-pattern-given-in-a-variable-in-awk
#     #               https://www.rasukarusan.com/entry/2019/04/30/000000
#     #
# 
#     file=$1
#     function_lst=($(awk -v pattern=$2 '$0 ~ pattern' $file))
# }
# 
# function func_lst() {
#     #
#     # @Description  command a & command b
#     #               background command a
#     #               foreground command b
#     # @params       : command a
#     #               : command b
#     # @Example
#     # @Reference: https://www.rasukarusan.com/entry/2019/04/30/000000
#     #
# 
#     local func=$(
#        typeset -f \
#        | grep ".*() {$" \
#        | grep "^[a-z_]" \
#        | tr -d "() {"   \
#        | fzf --height 100% --preview "source ~/Bmods; typeset -f  {}"
#    )
#     if [ -z "$func" ]; then
#         return
#     fi
#     typeset -f $func
# }

function get_function_lst () {
    #
    # @Description  Get function list of a shell script
    # @params       $1: Directory
    # @Example      function_lst=`get_function_lst $HOME/Bmods`
    # @Remarks      hit ONLY "function" keywords
    # @Reference    
    #

    local function_lst=($(awk '/^function/{print $2}' $1))
    echo $function_lst
    #local target_function=`array_fzf "${function_lst[*]}" "cat $HOME/"`
    # local target_function=`printf '%s\n' "${function_lst[@]}" | fzf --preview-label="howto" --preview='grep -A 6 {} $HOME/Bmods' --height 100%`
    # eval "${target_function}"
}

function get_target_function () {
    #
    # @Description  Get target function from function list
    # @params       $1: function list
    #               $2: script file
    # @Example      target_function=`get_target_function ${function_lst[*]}`
    # @Reference
    #
    local function_lst=($(echo $1))
    #echo "function_lst: $function_lst"
    #echo "script file:  $2"
    local target_function=`printf '%s\n' "${function_lst[@]}" | fzf --preview-label="howto" --preview="grep -B 1 -A 20 {} $2" --height 100%`
    echo $target_function

}

function choose_local_function () {
    #
    # @Description  choose target function from local script
    # @params       $1: script file
    # @Example      local target_function=`choose_local_function $BASE_DIR/$0`
    # @Reference
    #

    local function_lst=`get_function_lst $1`
    local target_function=`get_target_function $function_lst[*] $1`
    echo $target_function
}

function choose_Bmods_function () {
    #
    # @Description  choose target function from Bmods
    # @params       
    # @Example      local target_function=`choose_Bmods_function`
    # @Reference
    #

    local function_lst=`get_function_lst $HOME/Bmods`
    local target_function=`get_target_function $function_lst[*] $HOME/Bmods`
    echo $target_function
}

function echo_Bmods_function_lst () {
    #
    # @Description  print function list of Bmods (for mainly debug)
    # @params       
    # @Example      echo_Bmods_function_list
    # @Remarks      hit ONLY "function" keyword
    # @Reference
    #
    awk '/^function/{print $2}' $HOME/Bmods
}


typeset -a MODULE_lst
typeset -A DOTFILES_SUBMODULES
typeset -A MYWORK_lst
function set_variables () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    
    #

    echo "******************************"
    echo "* set_variables              *"
    echo "******************************"
    BASE_DIR=$PWD
    DOTFILES=$HOME/dotfiles/
    SAMPLE=$HOME/.config/sample/
    TMP=/tmp/8ucchiman/
    machine=`uname -s`
    # Reference: https://qiita.com/ttakuya50/items/085bea9176006016e593
    # MODULE_lst=(
    #     _debug
    #     fuzzy_settings
    #     default
    #     show_cmd_history
    #     load_local
    #     specific_scripts_function_lst
    # )
    #MODULE_lst = make_function_lst $HOME/gmods function zsh
    DOTFILES_SUBMODULES=(
        onelines            .config/lib/onelines
        csharp              .config/lib/codes/csharp
        c                   .config/lib/codes/c
        cpp                 .config/lib/codes/c++
        rust                .config/lib/codes/rust
        python              .config/lib/codes/python
        assembler           .config/lib/codes/assembler
        lua                 .config/lib/codes/lua
        cuda                .config/lib/codes/cuda
        IoT                 .config/lib/codes/IoT
        shell               .config/lib/codes/shell
    )
    # for value in ${(v)DOTFILES_SUBMODULES}; do
    #     echo $value
    # done
    # MYWORK_lst=(
    #     slam                # path
    #     maestro             # path
    #     speedestimation     # path
    # )
}


function attach_mywork () {
    #
    # @Description  clone myworks (for only 8ucchiman)
    # @params       
    # @Example      attach_mywork
    # @Remarks      git@gitlab.com:8ucchiman/mywork.git
    # @Reference    
    #

    $(cd $HOME/; git clone --recursive git@gitlab.com:8ucchiman/mywork.git)
}

function run_mywork () {
    #
    # @Description  mywork projects running
    # @params       
    # @Example      run_mywork
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    $(cd $HOME/mywork; ./Brun Lchoose_project)
}

function mywork_menue () {
    cd $HOME/mywork; ./Brun
}


function setup_environment () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    # ln -sf $HOME/dotfiles/.config/pockets/shell/Bmods Bmods
}

function _debug () {
    #
    # @Description  Check Bmods path!!!
    # @params       
    # @Example
    # @Reference    
    #

    echo "8ucchiman was here!!"
}


function add_submodules () {
    #
    # @Description  Add submodules for main repository
    # @params       $1: repository url
    # @Example
    # @Reference    
    #

    git submodule add $1
}

function show_samples () {
    #
    # @Description  Show sample images, videos, gifs, or texts
    # @params
    # @Example      show_samples
    # @Reference    
    #

    fuzzy_settings
    $(cd $SAMPLE; fzf)
    # echo $sample
}

function just_memo () {
    #
    # @Description  
    #               background command a
    #               foreground command b
    # @params       
    # @Example      just_memo
    # @Reference    https://www.publickey1.jp/
    #

    local -a keywords=(
        mojo        https://www.publickey1.jp/blog/23/wslpythonmojoastro_3020239.html
        wasm        https://zenn.dev/topics/wasm
        wasmer      https://www.publickey1.jp/blog/23/webassemblybashwasmer_40posixwasix.html
    )
}


function show_cmd_history () {
    #
    # @Description  show .zhistory
    # @params       
    # @Example      show_cmd_history
    # @Reference    
    #

    file_fzf $HOME/.zhistory
}

function run_submodule () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #


    #
    # toDo!!!!!!!!! my work
    #
    local target_submodule=`ls_fzf `
}


function run_python () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #


    #
    # toDo!!!!!!!!! my work
    #
    #
   
}

function run_c () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #



    #
    # toDo!!!!!!!!! my work
    #
    #
   
}

function run_cpp () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #



    #
    # toDo!!!!!!!!! my work
    #
    #

}

function run_rust () {


    #
    # toDo!!!!!!!!! my work
    #
    #

}

function run_csharp () {
    #
    # toDo!!!!!!!!! my work
    #
    #

}

function run_csharp () {
    #
    # toDo!!!!!!!!! my work
    #
    #

}

function update_dotfiles () {
    #
    # @Description  update dotfiles
    # @params       
    # @Example      update_dotfiles
    # @Reference    
    #


    cd $DOTFILES
    git fetch origin dev
    git merge origin/dev
    for value in ${(v)DOTFILES_SUBMODULES}; do
        cd $DOTFILES/$value
        git fetch origin dev
        git merge origin/dev
    done
    source $HOME/.zshrc
}

function gulliver_code_rsync () {
}


function _load_mywork_submodules () {
    
}

function fuzzy_settings () {
    #---------------#
    #   fzf & ag    #
    #---------------#
    # fzf から the_silver_searcher (ag) を呼び出すことで高速化
    # fzf の キーバインド
    #if [ -e /opt/local/share/fzf/shell/key-bindings.zsh ]; then
    #    source /opt/local/share/fzf/shell/key-bindings.zsh
    #fi
    
    if [ -e $HOME/.fzf/shell/completion.zsh ]; then
        source $HOME/.fzf/shell/completion.zsh
    fi
    
    # fzf の 補完設定
    #if [ -e /opt/local/share/fzf/shell/completion.zsh ]; then
    #    source /opt/local/share/fzf/shell/completion.zsh
    #fi
    
    if _has fzf && _has ag; then
        export FZF_DEFAULT_COMMAND='ag --nocolor -g ""'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
        export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND"
        export FZF_COMMON_MYOPTS="--height 40% --layout=reverse --multi"
        export FZF_DEFAULT_OPTS="$FZF_COMMON_MYOPTS" # --preview 'bat --color=always {} --style=plain'"
        export FZF_CTRL_T_OPTS="$FZF_COMMON_MYOPTS" # --bind 'ctrl-y:execute-silent(echo {} | pbcopy)+abort' --border --preview 'bat --color=always {}'"
    fi

}

function load_local () {
    #
    # TL;DR:        load local a file.zsh
    #
    #
    yn=`check_file_exist $1`
    if [[ $yn == "y" ]]; then
        source $1
    else
        echo "not exist local file"
    fi
}

function font_settings () {
    #
    # show config?
    #     $ cat /etc/fonts/fonts.conf
    #
    # Reference: https://zenn.dev/hanaasagi/articles/9e428f0c9594a6
    #
    if [[ -e $HOME/.fonts ]]; then

    else
        ln -sf $HOME/dotfiles/.config/fonts $HOME/.fonts
    fi
    fc-cache -f -v
}

function link_all () {
    #
    # @Description  link all files at one time
    # @params       $1: pattern
    # @return 
    # @Example      link_all $HOME/source/go/bin
    # Reference:    https://qiita.com/real_yaruo/items/0a1b4a88cfd5f27f062d
    #

    ls $1 | xargs -I{} ln -s {} {}
}

function anaconda () {
}

function clone_testrepository () {
    $(cd $TMP git clone git@github.com:Bucchiman/test.git)
    #git clone https://github.com/Bucchiman/test.git
}

function myawk () {
    """
        
    """
}

#function _assert() {
#    #
#    # $1: 条件式
#    # $2: 条件式がFalseの時に出力するメッセージ
#    # Reference: https://qiita.com/nannoki/items/15004992b6bb5637a9cd
#    #
#    eval $1
#    if [[ $? == 0 ]]; then
#        echo "great work!!!"
#    else
#        echo $2
#    fi
#}
#
#function test_add () {
#    _assert "$1"
#}

# function _assert () {
#     expected="$2"
#     input="$3"
# 
# 
#     ./9cc "$input" > tmp.s
#     cc -o tmp tmp.s
#     ./tmp
#     actual="$?"
# 
#     if [[ "$actual" == "$expected" ]]; then
#         echo "$input => $actual"
#     else
#         echo "$input => $expected expected, but got $actual"
#         exit 1
#     fi
# }


function _assert () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

}



#assert 0 0
#assert 42 42

#echo OK

function gutils_tic_toc () {
    #
    # Description:  Gutils tictoc
    # @params       $1: pattern
    # @return 
    # @example
    #               $ tic
    #               $ toc
    # Reference:    https://qiita.com/real_yaruo/items/0a1b4a88cfd5f27f062d
    #
    
}



function create_remote_repository ()
    #
    # @Description  create remote repository in github/gitlab
    # @params       $1: github | gitlab
    #               $2:
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    if [[ $1 == "github" ]]; then
        gh repo create $2 --private
    else
        glab repo create $2 --private
    fi




function default () {
    #
    # this is default setting
    # you can run this function without no arguments.
    #
    echo "******************************"
    echo "* default                    *"
    echo "******************************"
    echo "this is default setting"
    echo "you can run this function without no arguments."
}


function search () {
    local load_readme=$(cd $HOME/.config/lib/readme; /usr/bin/find . -type f | fzf --height 100% )
}





#######################################
function main () {
    set_variables
    fuzzy_settings
    if [[ $@ == "" ]]; then
    #    #
    #    # source modules
    #    # $ source Bmods
    #    #
    #elif [[ $@ == "." ]]; then
        # array_of_lines=("${(@f)$(my_command)}")
        # Reference: https://unix.stackexchange.com/questions/29724/how-to-properly-collect-an-array-of-lines-in-zsh
        # Reference: https://stackoverflow.com/questions/15691942/print-array-elements-on-separate-lines-in-bash
        # printf '%s\n' "${my_array[@]}"
        local target_func=`choose_Bmods_function`
        # echo $target_func
        eval ${target_func}
    else
        eval $@
    fi
}

# function _usage() {
#     echo "Usage: Bmods -B"
#     exit 1
# }

# if [[ $# = 0 ]]
# then
#     echo No arguments or options
#     exit 1
# fi

# while getopts b OPT
# do
#     case j in
#         b) echo hello; main_flag=1;;
#         :|\?) _usage;;
#     esac
# done

#if [[ $main_flag == 1 ]]; then
#    main
#fi

#ME=$0
#main $@
#######################################



#######################################
# 2023-10-28 18:59:55
# simply DEBUG
#######################################
# main @

#######################################

return
