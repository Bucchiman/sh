#!/bin/zsh
#
# FileName:     Bmods
# Author:       8ucchiman
# CreatedDate:  2023-07-27 13:10:49
# LastModified: 2023-01-23 14:11:45 +0900
# Reference:    https://unix.stackexchange.com/questions/33255/how-to-define-and-load-your-own-shell-function-in-zsh
#               https://sig9.org/archives/1120
#               https://qiita.com/icoxfog417/items/adbbf445d357c924b8fc
# Description:  ---
#

#@ archive
function pass () {
    #
    # @Description  no running, like python
    # @params       
    # @Example      pass
    # @Reference    
    #

}

#@
function init () {
    install_system
    if ! _has nvim; then install_neovim; fi
    if ! _has fzf; then install_fzf; fi
    if ! _has bat; then install_bat; fi
}


function install_system () {
    local -a package_lst=(
        make
        cmake
    )
    sudo apt-get install -y ${package_lst[*]}
}

function init_wsl () {
    sudo apt update
    sudo apt upgrade
}

function sick_sensor () {
    local -a sensor_lst=(
        wtt12l_b12547
        tim551_2050001
    )
    local -A datasheet(
        wtt12l_b12547       https://docs.rs-online.com/a533/A700000007638335.pdf
        tim551_2050001      https://docs.rs-online.com/513f/A700000007802452.pdf
    )
}

function add_metadata_to_image () {

}


function install_yq () {
    #
    # @Description  yaml cli install
    # @params       
    # @Example      install_yq
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    
    wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O $HOME/bin/yq
    chmod u+x $HOME/bin/yq
}

function sample01_yq () {

cat <<eos > sample01.yml
---
# A sample yaml file
company: spacelift
domain:
 - devops
 - devsecops
tutorial:
  - yaml:
      name: "YAML Ain't Markup Language"
      type: awesome
      born: 2001
  - json:
      name: JavaScript Object Notation
      type: great
      born: 2001
  - xml:
      name: Extensible Markup Language
      type: good
      born: 1996
author: omkarbirade
published: true
eos
}

function sample02_yq () {
    #
    # @Description  generate sample yaml file
    # @params       
    # @Example      sample02_yq
    # @Reference    https://zenn.dev/musyu/articles/a2ffd081b0eb077cf7b5
    #

cat <<eos > postgres-pod.yml
# postgres-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: postgres-pod
  labels:
    name: postgres-pod
    app: demo-app
spec:
  containers:
    - name: postgres
      image: postgres
      ports:
        - containerPort: 5432
      env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
eos
}



function pocket () {
    local -A reference_lst=(
        water_detection_satelight       https://towardsdatascience.com/water-detection-in-high-resolution-satellite-images-using-the-waterdetect-python-package-7c5a031e3d16
        wavelet_idea                    https://qiita.com/TumoiYorozu/items/a8193e5ecd957a1b9b0d
        wavelet_opencv                  https://qiita.com/stktk/items/c056ad72a8d9f9226c1f
        wavelet_intro                   https://scicoding.com/introduction-to-wavelet-transform-using-python/
        docker_port_forward             https://qiita.com/tatsuo-iriyama/items/e4bf2404411343116e3e
        mlflow_tips                     https://qiita.com/c60evaporator/items/e0eb1a0c521d1310d95d
        hyperopt                        https://qiita.com/kenchin110100/items/ac3edb480d789481f134
    )
}


#@ $1
function glab_create_branch_from_issue () {
    #
    # @Description  gitlab merge request
    # @params       $1: issue number
    # @Example      glab_create_branch_from_issue 6
    # @Reference    https://gitlab.com/gitlab-org/cli/-/blob/main/docs/source/mr/create.md
    #

    glab mr create -i $1
}

#@
function 8bit_assembler_simulator () {
    #
    # @Description  prepare for making 8bit assembler simulator
    # @params       
    # @Example      8bit_assembler_simulator
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    local -a reference_lst=(
        https://light11.hatenadiary.com/entry/2020/04/09/203510
        https://schweigi.github.io/assembler-simulator/
        https://schweigi.github.io/assembler-simulator/instruction-set.html
        https://www.mschweighauser.com/make-your-own-assembler-simulator-in-javascript-part1/
    )
}

#@
function pytorch_lib () {
    #
    # @Description  pytorch awesome libraries
    # @params       
    # @Example      pytorch_lib
    # @Reference    https://github.com/bharathgs/Awesome-pytorch-list
    #

    local -A lib_lst=(
        awesome     https://github.com/bharathgs/Awesome-pytorch-list
        pyro        https://github.com/pyro-ppl/pyro
        fastai      https://github.com/fastai/fastai
        raytune     xxxxxx
    )

    local -A tutorial_lst=(
        practical       https://github.com/spro/practical-pytorch
        nlp             https://pytorch.org/tutorials/beginner/deep_learning_nlp_tutorial.html
        pytorch_tuto    https://github.com/yunjey/pytorch-tutorial

    )

    local -A modelzoo_lst=(
        modelzoo        https://modelzoo.co/
    )

    local -A metrics_lst=(
        official        https://pytorch.org/serve/metrics.html

    )
}

#@
function install_firewalld () {
    #
    # @Description  install firewalld to set firewall
    # @params       
    # @Example      install_firewalld
    # @Reference    https://computingforgeeks.com/install-and-use-firewalld-on-ubuntu/
    #

    sudo apt update
    sudo apt install -y firewalld
    sudo systemctl enable firewalld
    sudo systemctl start firewalld
}

#@
function TauriDesktop () {
    #
    # @Description  install tauri (Desktop application)
    # @params       
    # @Example      install_tauri
    # @Reference    https://tauri.app/
    #

    #@ nest install
    function install_tauri () {
        cargo install create-tauri-app --locked
        cargo install trunk
    }

    #@ nest
    function run_tauri () {
        cargo tauri dev
    }

    #@ nest
    function create_tauri_app () {
        cargo create-tauri-app
    }

    #@ nest
    function _cargo () {
        cargo install create-tauri-app --locked
        cargo create-tauri-app
    }

    #@ nest
    function _shell () {
        sh <(curl https://create.tauri.app/sh)
    }

}

#@ install
function install_typescript () {
    npm install -g typescript
    npm install -g ts-node
}

function setup_deno () {
    #
    # @Description  deno setup
    # @params       
    # @Example      setup_deno
    # @Reference    https://deno-ja.vercel.app/manual@v1.9.1/getting_started/first_steps
    #

    #@ install
    function install_deno () {
        #
        # @Description  deno installer
        # @params       
        # @Example
        # @Reference    https://github.com/denoland/deno
        #

        curl -fsSL https://deno.land/install.sh | sh
    }

    #@
    function sample_deno () {
        deno run https://deno.land/std@0.94.0/examples/welcome.ts
    }
}



#@ mac
function MacSet () {
    #@ nest
    function mac_update () {
        sudo port selfupdate
    }

    #@ nest
    function mac_upgrade () {
        local target_package=packages=$(sudo port selfupdate && sudo port installed | fzf)
        # sudo port upgrade $target_package
    }
}

#@
function environment () {
    nvim --version
}


#@
function fork_repo () {
    local -a platforms=(
        github 
        gitlab
    )
    local target_platform=`array_fzf "${platforms[*]}"`
    echo -n "repository for fork...> "
    read repo
    if [[ $target_platform == "github" ]]; then
        gh repo fork $repo
    else
        glab repo fork $repo
    fi
}

#@
function website () {
    local -A reference_lst=(
        rust_web    https://zenn.dev/etoal83/articles/6eb6031865f3de
        elm         https://qiita.com/kazurego7/items/27a2b6f8b4a1bfac4bd3
        #reddit_info https://www.reddit.com/r/rust/comments/igrq90/comment/g2wkd17/?utm_source=share&utm_medium=web2x&context=3
    )
}

#@ 
function colorhex() {
    # https://askubuntu.com/questions/1405822/printf-statement-with-background-and-foreground-colours
    # printf '\033[41;32m%s\033[0m\n' foobar
    for color in {000..255}; do
        hex_color=`printf "%04x" $color`
        print -nP "%F{$color}$hex_color %f"
        if [ $(($((color-16))%6)) -eq 5 ]; then
            printf "\n"
        fi
    done

}


#@ idea
function gameboy_emulator () {
    local -A reference_lst=(
        keichi      https://keichi.dev/post/write-yourself-a-game-boy-emulator/
        ocaml       https://www.docswell.com/s/linoscope/ZNRRXL-game-boy-emulator-ocaml#p24
        go_01       https://hackmd.io/@anqou/HJcvRrwy9
        awesome     https://github.com/gbdev/awesome-gbdev#documentation
        go_02       https://zenn.dev/akatsuki/articles/ec95ab95f0e89ea8c38f
        rust        https://mjhd.hatenablog.com/entry/2021/04/14/221813
    )
}


#@
function colorlist () {
    for color in {000..015}; do
        print -nP "%F{$color}$color %f"
        print -nP "%K{$color}$color %k"
    done
    printf "\n"
    for color in {016..255}; do
        print -nP "%F{$color}$color %f"
        if [ $(($((color-16))%6)) -eq 5 ]; then
            printf "\n"
        fi
    done
}


#@ $1 git
function update_submodules () {
    #
    # @Description  update submodules
    # @params       $1: Directory
    # @Example
    # @Date         2023-11-09 11:49:01
    # @ToDo         if arguments
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    $(cd $1 && git submodule update --init --recursive)
}

#@
function network_projects () {
    local -A projects=(
    )
}


#@
function hotprojects () {
    #
    # @Description  hotprojects of repository, publickey1
    #               background command a
    #               foreground command b
    # @params       
    # @Example
    # @Reference    
    #

    #@ nest
    function reference_lst () {
        mojo                https://www.publickey1.jp/blog/23/wslpythonmojoastro_3020239.html
        wasm                https://zenn.dev/topics/wasm
        wasmer              https://www.publickey1.jp/blog/23/webassemblybashwasmer_40posixwasix.html
        technical_writing   https://qiita.com/yasuoyasuo/items/c43783316a4d141a140f
    }
    typeset -A platforms=(
        publickey1              https://www.publickey1.jp/
        most-repos              https://www.hostinger.com/tutorials/most-popular-github-repos
        codecamp                https://www.freecodecamp.org/news/the-most-popular-coding-challenge-websites/#7atcoder
        beecrowd                https://www.beecrowd.com.br/judge/en
        hackerrank              https://www.hackerrank.com/
    )

}
   

#@ $2
function Lremote_mount () {
    #
    # @Description  remote mount
    # @params       $1: remote server(remote path + remote directory)
    #                   e.g. bucchiman@hogemachine:mywork/project/fuga/mnt
    #               $2: host directory
    #                   e.g. $BASE_DIR/mnt
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    local remote_server=$1
    local host_dir=$2
    if [[ $# == 0 ]]; then
        echo -n "remote server(like \"bucchiman@hogemachine:mywork/project/fuga/mnt\")> "
        read remote_server
        echo -n "host directory(like \"\$BASE_DIR/mnt\")> "
        read host_dir
    fi
    
    sshfs -o follow_symlinks -o intr -o sshfs_sync \
             $remote_server \
             $host_dir
}

#@ educ lua reference
function lua_projects () {
    #
    # @Description  lua projects
    #               reference:  other projects
    #               idea:       my projects
    # @params       
    # @Example      lua_projects
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    #@ nest
    function reference () {
        typeset -A reference_lst=(
            apisix          https://github.com/apache/apisix
            kong            https://github.com/Kong/kong
        )
    }

    #@ nest
    function idea () {
        typeset -A idear_lst=(
        )
    }

}



#@ educ neovim reference
function neovim_projects () {
    #
    # @Description  neovim projects
    #               reference:  other projects
    #               idea:       my projects
    # @params       
    # @Example      neovim_projects
    # @Reference    
    #

    #@ nest
    function reference () {
        typeset -A reference_lst=(
            tetris_like     https://www.rasukarusan.com/entry/2021/12/14/000000
            snow_like       https://qiita.com/kaitat/items/fe72c844e86abd030daa
            hightlight      https://ryota2357.com/blog/2023/neovim-custom-vim-ui-input/
            usefule_builtin https://qiita.com/jnchito/items/57ffda5712636a9a1e62
            colorscheme     https://blog.atusy.net/2022/04/28/vim-colorscheme-by-buffer/
            extmark         https://www.rasukarusan.com/entry/2021/08/22/202248
            play_neovim     https://www.rasukarusan.com/entry/2019/12/06/000000
        )
    }
}


## #@ lopez
## function temporal_fixed () {
##     sed 's/if \[ \$USE_WSL2 == 1 \]/if \[\[ \$USE_WSL2 == 1 \]\]/g' $HOME/bin/gulliver/dot.bashrc
## }

#@ install
function install_wasm () {
    #
    # @Description  wasm to install
    # @params       
    # @Example      install_wasm
    # @Date         2023-11-08 12:58:32
    # @Reference    https://rustwasm.github.io/wasm-pack/installer/
    #

    #@ nest
    function only4wsl2 () {
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    }

    #@ nest
    function anyplatform () {
        cargo install wasm-pack
    }

    #@ nest
    function otherpm () {
        npm install -g wasm-pack
        # yarn global add wasm-pack
    }

    function_lst=(
        only4wsl2
        anyplatform
    )
    local target_func=`array_fzf "$function_lst[*]"`
    eval $target_func
}


#@ educ rust reference
function rust_projects () {
    function reference () {
        typeset -A reference_lst=(
            テトリス        https://zenn.dev/kumavale/books/30efec2e1d3428
            入門            https://zenn.dev/mebiusbox/books/22d4c1ed9b0003
            tauri           https://zenn.dev/kumassy/books/6e518fe09a86b2
            vulkan          https://zenn.dev/hatoo/books/52bcb9e9f7c87d
            async           https://zenn.dev/magurotuna/books/tokio-tutorial-ja
            official_docs   https://www.rust-lang.org/ja/
        )
        for key in ${(k)reference_lst}; do
            echo "$key\t\t$reference_lst[$key]"
        done
    }
    reference
}


#@ educ c#
function c#_projects () {
    function reference () {
        typeset -A reference_lst=(
            unity           https://zenn.dev/twugo/books/21cb3a6515e7b8
            wasm            https://zenn.dev/okazuki/books/aspnet-net-core-blazor-wasm
            C#              https://zenn.dev/oskgw_log/books/csharp-entrance
        )
        echo ${(kv)reference_lst}
    }
}

#@ educ cpp
function c++_projects () {
    function reference () {
        typeset -A reference_lst=(
            multithread     https://zenn.dev/yohhoy/books/cpp-stdlib-multithreading
            raytracing      https://zenn.dev/mebiusbox/books/8d9c42883df9f6
            vulkan          https://zenn.dev/nishiki/books/f468197dca2dd8
            micon           https://zenn.dev/yuina_blend/books/c-introduction
        )
        echo ${(kv)reference_lst}
    }
}


#@ educ diy
function diy_projects () {
    function reference () {
        typeset -A reference_lst=(
            pico_01         https://qiita.com/ochaochaocha3/items/1969d76debd6d3b42269
        )
        
    }
    
}



#@ educ reference
function machine_language () {
    function reference () {
        local -A reference_lst=(
            シンボルテーブルについて    https://drumato.hatenablog.com/entry/2019/05/16/201234
            arコマンド解説              https://linuxcommand.net/ar/#s
            cmakeの使い方               https://qiita.com/shohirose/items/45fb49c6b429e8b204ac
            ライブラリについて          https://qiita.com/false-git@github/items/4b531467788b446a18d2
            system_call01               https://research.miidas.jp/2019/05/macos%E3%81%AE%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%B3%E3%83%BC%E3%83%AB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/
            system_call02               https://qiita.com/m6m/items/295d1827f5f2a32a7bb1
            memory_leak                 https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/HighMemoryUsage/
            mac_repo_01                 https://github.com/below/HelloSilicon
            mac_repo_02                 https://github.com/Apress/Programming-with-64-Bit-ARM-Assembly-Language
            ctf                         https://kashiwaba-yuki.com/ctf-elf-training
            arm64                       https://modexp.wordpress.com/2018/10/30/arm64-assembly/
            mac_m1                      https://note.com/narikon/n/n714829b46475
            mercari                     https://engineering.mercari.com/en/blog/entry/20211129-compiling-for-ios-on-apple-m1/
            tsuda                       https://nw.tsuda.ac.jp/lec/arm64/mac_m1/
            tutorial                    https://www.section.io/engineering-education/assembly-part-1/
            tutorial_x86_64             https://github.com/mschwartz/assembly-tutorial
            nasm                        https://cs.lmu.edu/~ray/notes/nasmtutorial/
            exercises                   https://cs61.seas.harvard.edu/site/2020/AsmEx/
            z80_hello                   https://annpin.com/posts/18/03/06/hello-low-layer-programming/
            6502_hello                  https://euske.github.io/slides/asm6502/index.html
            6809_hello                  http://www.6809.net/6809/?6809%CC%BF%CE%E1%C9%BD
            68000_hello                 https://www.kkaneko.jp/pro/as/advanced/outline.html
            8086_hello                  http://software.aufheben.info/contents.html?contents_key=kouza_asm
        )
        echo ${(kv)reference_lst}
    }
}


#@ educ
function ar_static () {
    #
    # @Description  ar command (static maker)
    # @params       
    # @Example      ar_static
    # @Reference    https://linuxcommand.net/ar/
    #

    #@ nest
    function _r-option () {
        mkdir $TMP/ar_educ; cd $_;
cat <<eos > file1.c
#include<stdio.h>
void func1 (void) {
    printf("func1 is here\n");
}
eos
cat <<eos > file2.c
#include<stdio.h>
void func2 (void) {
    printf("func2 is here\n");
}
eos
cat <<eos > file3.c
#include<stdio.h>
void func3 (void) {
    printf("func3 is here\n");
}
eos
        gcc -c file1.c file2.c file3.c      # オプジェクトファイル作成
        ar r archive.a *.o                  # 静的ファイル追加
        ar t archive.a                      # 静的ライブラリ一覧表示
    }

    #@ nest
    function _d-option () {
        _r-option
        ar t archive.a
        ar d archive.a file2.o
        ar t archive.a
    }

    #@ nest
    function _t-option () {
        _r-option
        ar t archive.a
    }

    #@ nest
    function _x-option () {
        _r-option
        ar t archive.a
        ar x archive.a file1.o file2.o
        ls
    }

    #@ nest
    function _p-option () {
        echo "no description"
    }

    #@ nest
    function _s-option () {
        echo "no description"
    }

    #@ nest
    function _q-option () {
        _r-option
        ar t archive.a
cat <<eos > file4.c
#include<stdio.h>
void func4 (void) {
    printf("func4 is here!!\n");
}
eos
        ar q archive.a file4.o
    }

    #@ nest
    function _m-option () {
        _r-option
        ar t archive.a
        ar m archive.a file2.o
        ar t archive.a
    }

    #@ nest
    function clean () {
        rm -r $TMP/ar_educ
    }
}


#@
function set_devcontainer () {
    #
    # @Description  set devcontainer
    # @params       
    # @Example
    # @Reference    
    #

    #@ nest
    function install_devcontainer () {
        npm install -g @devcontainers/cli
    }

    #@ nest
    function test () {
        git clone https://github.com/microsoft/vscode-remote-try-rust
        cd vscode-remote-try-rust/
        devcontainer up --workspace-folder .
    }
}

#@
function github_action () {
    #
    #
    #
    # Reference     https://qiita.com/vZke/items/868eb9fd5289d2a25660
    ###################################
    # Term
    #   workflow:
    #       parts:  trigger
    #               jobs
    #       what is:.github/worflows directory (define yaml)
    #
    #   event:
    #       trigger workflow
    #       outside event: webhook
    #
    #   jobs:
    #       sequence step
    #
    #   action:
    #       command
    #
    #   artifacts
    ###################################
    #
    #
}

#@ install
function install_lua () {
    mkdir -p $HOME/source && cd $_
    curl -R -O http://www.lua.org/ftp/lua-5.4.6.tar.gz
    tar zxf lua-5.4.6.tar.gz
    cd lua-5.4.6
    make all test
    cd src && ln -sf $PWD/lua $HOME/bin/
}

#@ error
function install_luarocks () {
    #
    # @Description  install luarocks
    # @params       
    # @Example      install_luarocks
    # @Date         2023-11-02 11:24:28
    # @Reference    https://github.com/luarocks/luarocks/wiki/Download
    #

    #@ nest
    function test () {
        mkdir $TMP/lua_install_test && cd $_
        curl -R -O http://www.lua.org/ftp/lua-5.3.5.tar.gz
        tar -zxf lua-5.3.5.tar.gz
        cd lua-5.3.5
        sed -e "s/INSTALL_TOP= \/usr\/local/INSTALL_TOP= \$\(HOME\)\/source\/lua/" Makefile
    }

    #@ nest
    function run () {
        #cd $HOME/source
        mkdir $HOME/source/lua && cd $_
        curl -R -O http://www.lua.org/ftp/lua-5.3.5.tar.gz
        tar -zxf lua-5.3.5.tar.gz
        cd lua-5.3.5
        sed -e "s/INSTALL_TOP= \/usr\/local/INSTALL_TOP= \$\(HOME\)\/source\/lua/" Makefile
        make linux test
        make install
    }

    local -a function_lst=(
        test
        run
    )
    local target_function=`array_fzf "$function_lst[*]"`
    eval $target_function
}

#@ $1
function CurrentDirectory2Submodule () {
    #
    # @Description  directory to submodule
    # @params       
    # @Example      CurrentDirectory2Submodule
    # @Reference    https://day.marketing/blog/create-a-git-submodule-inside-an-existing-directory/
    #               https://blog.cloud-acct.com/posts/u-git-add-submodule/
    #

    # # local BASENAME=`basename $1`
    # # local remoterepo="git@github.com:Bucchiman/$BASENAME.git"
    # # gh repo create $BASENAME --private  # リモートリポジトリを作成 
    # # cd $1; git init
    # # git submodule add $remoterepo $BASENAME

    # local BASENAME=`basename $1`
    # local remoterepo="git@github.com:Bucchiman/$BASENAME.git"
    # gh repo create $BASENAME --private
    # git submodule add $remoterepo $1

    local -A platforms=(
        github      git@github.com:Bucchiman/
        gitlab      git@gitlab.com:Bucchiman/
    )
    target_platform=~`array_fzf "${(k)platforms[*]}"`

    # # vim .gitmodule
    # ## [submodule "path/to/submodule"]
    # ## path = path/to/submodule
    # ## url = git@github.com:user/submodule
    # ## 

    # git submodule add git@github.com:user/submodule.git submoduletmp
    # git submodule sync
    # git add .
    # git commit -m 'Initial commit of submodule'
    # git push origin master

    # cd path/to/submodule
    # # vim .gitignore
    # git add .
    # git commit -m 'Initial commit of submodule'
    # git remote add origin git@github.com:user/submodule.git
    # git push -u origin master
}

#@
function topleveldirectory () {
    #
    # @Description  toplevel directory
    # @params       
    # @Example      topleveldirectory $BASE_DIR
    # @Reference    
    #

    cd $1
}

#@
function install_distant () {
    mkdir -p $HOME/source/ && \
    git clone https://github.com/chipsenkbeil/distant.git && \
    cd distant && \
    cargo build --release && \
    ln -sf $PWD/target/release/distant $HOME/bin
}

#@ install
function install_nix () {
    _has cargo
}

#@
function set_devbox () {
    #
    # @Description  devbox setup
    # @params       
    # @Example      set_devbox
    # @Reference    https://www.nixhub.io/
    #


    #@ nest local
    function install_nix () {
        #
        # @Description  command a & command b
        #               background command a
        #               foreground command b
        # @params       : command a
        #               : command b
        # @Example
        # @Reference    https://github.com/nix-community/nix-user-chroot
        #               https://nixos.wiki/wiki/Nix_Installation_Guide
        #

        cargo install nix-user-chroot
        mkdir -m 0755 $HOME/bin/.nix
        nix-user-chroot $HOME/bin/.nix bash -c 'curl -L https://nixos.org/nix/install | sh'
        #nix-user-chroot ~/.nix bash
    }


    #@ nest sudo
    function install_devbox () {
        #
        # @Description  install devbox [sudo | local]
        # @params       
        # @Example      install_devbox
        # @Reference    https://www.jetpack.io/devbox/docs/installing_devbox/
        #

        curl -fsSL https://get.jetpack.io/devbox | bash
        # curl https://get.jetpack.io/devbox
    }

    #@ nest
    function base_packages () {
        devbox add zsh@latest                   # https://www.nixhub.io/packages/zsh
        devbox add neovim@latest                # https://www.nixhub.io/packages/neovim
        devbox add neovim-qt@latest             # https://www.nixhub.io/packages/neovim-qt
        devbox add neovim-gtk@latest            # https://www.nixhub.io/packages/neovim-gtk
        devbox add neovim-remote@latest         # https://www.nixhub.io/packages/neovim-remote
        devbox add git@latest                   # https://www.nixhub.io/packages/git
        # devbox add ripgrep
        devbox add fzf@latest                   # https://www.nixhub.io/packages/fzf
        devbox add gh@latest                    # https://www.nixhub.io/packages/gh
        devbox add bat@latest                   # https://www.nixhub.io/packages/bat
    }

    #@ nest
    function python_packages () {
        devbox add python@312
        devbox add python312Packages.pip
    }

    #@ nest
    function go_packages () {
        devbox add go
    }

    #@ nest
    function rust_packages () {
        devbox add rustc@latest
        devbox add rustup@latest
        devbox add rustus@latest
        devbox add rustcat@latest
        devbox add rustfmt@latest
    }

    #@ nest
    function create_workspace () {
        echo -n "Where is workspace? Please tell me path!!> "
        read workspace_path
        mkdir -p $workspace_path && cd $_
        devbox init;
        local -a packages=(
            base_packages
            python_packages
            rust_packages
            go_packages
            pass
        )
        local target_packages=`array_fzf "$packages[*]"`
        eval $target_packages
        devbox shell;
    }

    local -a function_lst=(
        install_nix
        install_devbox
        create_workspace
        pass
    )
    local target_functions=`array_fzf "$function_lst[*]"`
    eval $target_functions

}

#@ educ
function binary_hack () {
    #
    # @Description  
    # @params       
    # @Example      binary_hack
    # @Reference    https://qiita.com/rsooo/items/bb91071685f447ce29db
    #

    #@ nest
    function file_type () {
        file /bin/ls /bin/sh /var/log/messages  /dev/sda /dev/tty11 /tmp
    }

    #@ nest
    function extract_string_from_file () {
        strings /var/log/wtmp
    }

    #@ nest
    function edit_binary () {
        vim -b binfile
    }

    local dump4binary () {
        od -Ax -tx1z /var/log/wtmp
        hexdump -C /var/log/wtmp | head
        hexyl
        objdump
    }

    local function_lst=(
        file_type
        extract_string_from_file
    )

    local target_function=`array_fzf "$function_lst[*]"`
    eval "$target_function"
}


#@ educ
function create_c_library () {
    #
    # @Description  create c library
    # @params       
    # @Example      create_c_library
    # @Remarks      workspace is created in /tmp/8ucchiman directory
    # @Reference    https://sleepy-yoshi.hatenablog.com/entry/20090510/p1
    #

    local workspace="/tmp/8ucchiman/create_c_library"
    mkdir -p $workspace
    cd $workspace


    #@ nest
    function setup () {
        #
        # @ make
        #
cat << EOF > test.c
#include <stdio.h>
#include "test.h"

void print_hoge (int num) {
    int i;
    for (i = 0; i < num; i++) {
        printf("hoge\n");
    }
}
EOF
cat << EOF > test.h
#ifndef TEST_H
#define TEST_H

void print_hoge (int num);

#endif
EOF

cat << EOF > main.c
#include "test.h"

int
main (void) {
    print_hoge(5);
    return 0;
}
EOF
    }

    #@ nest
    function compile2libtest () {
        gcc -shared test.c -o libtest.so
    }

    #@ nest
    function compile2main () {
        gcc -I./ -L./ main.c -o main -ltest
    }

    #@ nest
    function main () {
        ./main
        ldd main            # check shared library of excutable file
    }

    setup
    compile2libtest
    compile2main
    main
}

#@
function setup_postfix () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    sudo apt update
    sudo apt install -y postfix
    # sudo cp /usr/share/postfix/main.cf.dist /etc/postfix/main.cf
    # sudo vi /etc/postfix/main.cf
}

#@ help
function help_rsync () {
    echo "-v | --verbose            動作内容を表示する "
    echo "-q | --quiet              動作中のメッセージを抑制する"
    echo "-n | --dry-run            試験モード。実際には動作せず、動作内容だけ表示する（「-v」や「--stats」を一緒に指定する）"
    echo "--stats                   ファイル数や転送サイズを表示する"
    echo "--list-only               コピーする代わりにファイルのリストを作成する"

    echo "-a | --archive            アーカイブモード（「-rlptgoD -no-H -no-A -no-X」相当）"
    echo "      -r | --recursive    ディレクトリを再帰的に処理する"
    echo "      -l | --links        シンボリックリンクをシンボリックリンクのままコピーする"
    echo "      -p | --perms        パーミッションを保持する"
    echo "      -t | --times        タイムスタンプを保持する"
    echo "      -g | --group        所有グループをそのまま保持する"
    echo "      -o | --owner        所有者をそのまま保持する（自分以外の所有者を保持するにはroot権限が必要）"
    echo "      -D                  デバイスファイルや特殊ファイルを保持する（「--devices --specials」相当）"
    echo "      --devices           デバイスファイルを保持する（root権限が必要）"
    echo "      --specials          特殊ファイルを保持する"

    echo "--no-オプション           指定したオプションを無効にする（「-H」を無効にする場合は「--no-H」のように指定する）"
    echo "-I | --ignore-times       サイズとタイムスタンプが同じファイルも処理する"
    echo "--size-only               サイズが同じファイルは処理しない"
    echo "-c | --checksum           更新日とサイズではなく、チェックサムで変更の有無をチェックする"
    echo "--daemon                  デーモンとして動作（「--daemon --help」でデーモン時に使用できるオプションが確認できる）"
}

#@ python
function instance_package () {
    pip install hydra-core --upgrade
    pip install -U "ray[data,train,tune,serve]"
    pip install async-timeout
    pip install hyperopt
    pip install torch torchvision torchaudio
    pip install scipy
    pip install scikit-learn
    pip install tensorboard
}

#@ 
function Mhoareyou () {
    #
    # @Description  machine description
    # @params       
    # @Example      
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    set DATE  = `date +%Y.%m.%d_%H:%M:%S`
set HERE = `pwd`

}


#@ python
function scraping_python () {
    #
    # @Description  scraping
    # @params       
    # @Example      scraping_python
    # @Reference    https://scrapy.org/
    #

    #@ nest
    function setup () {
        pip install requests scrapy selenium beautifulsoup4
    }

    #@ nest
    function run () {

    }

    #@ nest
    function test () {
        #
        # @Description  test sample
        # @params       
        # @Example
        # @Reference    https://qiita.com/D_U_8240/items/7ec882f8ba34c606a795
        #

        mkdir -p $TMP/scrapy_test && cd $_
        scrapy startproject sake
        #scrapy genspider <ファイル名> <スクレイピングしたいweb URL>
        cd sake && scrapy genspider scrapy_sake https://www.saketime.jp/ranking/
        cd $TMP/scrapy_test/sake && scrapy crawl scrapy_sake
    }

    #@ nest
    function clean () {
        rm -r $TMP/scrapy_test
    }

    local -a function_lst=(
        setup
        run
        test
        clean
    )
    local target_function=`array_fzf "$function_lst[*]"`
    eval $target_function
}

#@
function diff_checker () {
    #
    # @Description  rsync diff check
    # @params       
    # @Example      diff_checker /deploy/current /deploy/previous
    # @Remarks      for gulliver codes
    # @Reference    https://russt.me/2018/07/creating-and-applying-diffs-with-rsync/
    #

    local -a subcommands=(
        test
        run
        clean
        gulliver
    )
    local subcommand=`array_fzf "$subcommands[*]"`
    if [[ $subcommand == "run" ]]; then
        local A
        local B
        if [[ $# == 2 ]]; then
            A=$1
            B=$2
        else
            echo "You have to set two directories to compare each others."
            echo -n "A> "
            read A
            echo -n "B> "
            read B
        fi
        #rsync --write-batch=diff $1 $2
        #rsync --only-write-batch=diff $1 $2
        diff -rupN $A $B > diff.patch
    elif [[ $subcommand == "test" ]]; then
        mkdir -p $TMP/diff_checker_test && cd $_
        mkdir -p current && cd $_ && \
cat <<eos > calc.c
    #include <stdio.h>
    int add (int a, int b) {
        return a + b;
    }
    int sub (int a, int b) {
        return a - b;
    }
eos
cat <<eos > main.c
    #include <stdio.h>
    
    int main (void) {
        print("Hello world\n");
        return 0;
    }
eos
        mkdir -p doc/ && cd $_ && \
cat <<eos > doc.md
These contents will be written to the file.
        This line is indented.
8ucchiman was here!!
eos

        mkdir -p $TMP/diff_checker_test && cd $_
        mkdir -p previous && cd $_ && \
cat <<eos > calc.c
    #include <stdio.h>
    int add (int a, int b) {
        return a + b;
    }
eos
cat <<eos > main.c
    #include <stdio.h>
    
    int main (void) {
        print("Hello world\n");
        return 0;
    }
eos
        mkdir -p doc/ && cd $_ && \
cat <<eos > doc.md
These contents will be written to the file.
        This line is indented.
eos

        # cd $TMP/diff_checker_test && rsync --only-write-batch=diff current previous
        cd $TMP/diff_checker_test; diff -rupN current previous > test.patch; cat test.patch

    elif [[ $subcommand == "gulliver" ]]; then
        # rsync -aur $HOME/bin/gulliver /tmp/8ucchiman/gulliver
        #diff -rupN /tmp/gulliver_enviro/bin/gulliver $HOME/bin/gulliver    # > gulliver.patch; cat gulliver.patch
        diff -r /tmp/gulliver_enviro/bin/gulliver $HOME/bin/gulliver > gulliver.patch; cat gulliver.patch
    else
        rm -rf $TMP/diff_checker_test
    fi
}

#@ mac
function diskformat () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Remarks      Mac formatter (for raspi)
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #
    # @result       disutil list
    # /dev/disk0 (internal, physical):
    #    #:                       TYPE NAME                    SIZE       IDENTIFIER
    #    0:      GUID_partition_scheme                        *1.0 TB     disk0
    #    1:             Apple_APFS_ISC Container disk1         524.3 MB   disk0s1
    #    2:                 Apple_APFS Container disk3         994.7 GB   disk0s2
    #    3:        Apple_APFS_Recovery Container disk2         5.4 GB     disk0s3
    # 
    # /dev/disk3 (synthesized):
    #    #:                       TYPE NAME                    SIZE       IDENTIFIER
    #    0:      APFS Container Scheme -                      +994.7 GB   disk3
    #                                  Physical Store disk0s2
    #    1:                APFS Volume Macintosh HD            12.0 GB    disk3s1
    #    2:              APFS Snapshot com.apple.os.update-... 12.0 GB    disk3s1s1
    #    3:                APFS Volume Preboot                 9.9 GB     disk3s2
    #    4:                APFS Volume Recovery                1.7 GB     disk3s3
    #    5:                APFS Volume Data                    223.6 GB   disk3s5
    #    6:                APFS Volume VM                      20.5 KB    disk3s6
    # 
    # /dev/disk4 (external, physical):
    #    #:                       TYPE NAME                    SIZE       IDENTIFIER
    #    0:     FDisk_partition_scheme                        *120.0 GB   disk4
    #    1:               Windows_NTFS raspiHDD                115.0 GB   disk4s1       # <- target device
    #    2:                       0x12                         5.0 GB     disk4s2

    diskutil list
    echo -n "target identifier (like disk4s1) > "
    read identifier
    local -a formats=(
        ExFAT
        HFS+
        JHFS+
        APFS
        MS-DOS
        MBR
        GPT
    )

    echo -n "diskname? (like raspiHDD any string is OK.)> "
    read diskname
    local format=`array_fzf "${formats[*]}"`
    diskutil eraseDisk $format $diskname /dev/$identifier
}

#@
function _check_file_exist () {
    # https://tanakatarou.tech/1699/
    [ -e $1 ]; echo $?; # or [ -a file ];
}

#@ archive
function _has () {
    return $( whence $1 &>/dev/null )
}

#@
function _git_config () {
    git config --local user.name "8ucchiman"
    git config --local user.email "8ucchiman@gmail.com"
}

#@
function install_lazygit () {
    #
    # @Description  lazygit install (Ubuntu)
    # @params       
    # @Example      install_lazygit
    # @Reference    https://github.com/jesseduffield/lazygit/issues/1460
    #

    if ! _has go; then
        install_go
    fi
    # go install github.com/jesseduffield/lazygit@leighmcculloch
    sudo snap install core
    sudo snap install lazygit-gm
}

#@ install
function install_language () {
    #
    # @Description  install rust
    # @params       
    # @Example      install_rust
    # @Reference    
    #

    #local -a langs=( rust go )
    #if [[  ]]; then
    #    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    #fi
}

#@ install
function install_modular () {
    #
    # @Description  modular mojo install
    # @params       
    # @Example      install_modular
    # @Reference    https://developer.modular.com/download
    #
    
    sudo apt-get update && \
    sudo apt-get install modular && \
    modular clean && \
    modular install mojo
}

#@ install
function install_go () {
    #
    # @Description  go install
    # @params       
    # @Example      install_go
    # @Reference    
    #

    cd $HOME/source
    if [[ -e go1.21.3.linux-arm64.tar.gz ]]; then
        wget https://go.dev/dl/go1.21.3.linux-arm64.tar.gz
        rm -rf $HOME/source/go && tar -C $HOME/source/ -xzf go1.21.3.linux-arm64.tar.gz
    fi
    ln -sf $PWD/go/bin/go $HOME/bin/
}

#@ install arguments $1
function setup_nodejs () {
    #
    # @Description  nodejs modules
    # @params       $1: nest function
    # @Example      setup_nodejs install_fnm
    # @Reference    
    #

    #@ nest
    function install_fnm () {
        #
        # @Description  fnm nodejs package manager
        # @params       
        # @Example      
        # @Reference    
        #

        cargo install fnm
        fnm install --lts
    }
    eval $@
}

#@ raspi_pico
function pico_environment () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/ochaochaocha3/items/1969d76debd6d3b42269
    #

    
    rustup target install thumbv6m-none-eabi
    cargo install flip-link                     # 組込みプログラム実行時のスタックオーバーフローを防止するため、リンク時にメモリ配置を変更するツール
    cargo install elf2uf2-rs                    # ビルドしたプログラムをUF2というPicoに書き込める形式に変換するツール
    cargo install cargo-generate
}

#@ $1
function ls_all_files () {
    #
    # @Description  ls all files with recursively directories
    # @params       $1: target directory
    #
    # @Example      $ Bmods ls_all_files $HOME/bin/gulliver
    #               > 
    #               >
    #               >
    #               >
    ls -l --color=auto -d `find $1`
    # ls -ld --color=auto $(find $HOME/bin/gulliver)
    # ls -ld --color=auto `find $HOME/bin/gulliver`
}

#@ $2
function background_one_foreground_the_other () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       $1: command a
    #               $2: command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #
    $1 & $2
}

#@ $2
function order_concat_commands () {
    #
    # @Description  command a && command b
    #               run command a, if error, next command b is not running
    #               command b
    # @params       $1: command a
    #               $2: command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #
    $1 && $2
}

#@ $2
function reorder_concat_commands () {
    #
    # @Description  command a || command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #
    $1 || $2
}

#@ $2
function update_check () {
    #
    # @Description  command a || command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #
}

#@ $1
function make_shared_library () {
    #
    # @Description  make shared library
    # @params       $1: file name (without extension)
    # @Example      make_shared_library sub
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    gcc -maix64 -fpic -c $1.c
    gcc -maix64 -shared -o lib$1.so $1.o
}


#@
function zsh_lovers () {

    local -A reference_lst=(
        modifier        https://wonderwall.hatenablog.com/entry/2016/06/19/154205
    )
}


#@ $1
function youare... () {
    echo "you are ..."
    echo "$1"
}

#@ install
function install_neovim () {
    #
    # @Description  install neovim (more latest version)
    # @params       
    # @Example
    # @Remarks      apt package manager has old version neovim
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    cd $HOME/source/
    wget https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz
    tar xzvf nvim-linux64.tar.gz
    ln -sf $PWD/nvim-linux64/bin/nvim $HOME/bin/nvim
    # sudo apt install -y snapd
    # sudo snap install --classic nvim
    # git clone https://github.com/neovim/neovim.git $HOME/source/neovim
    # cd $HOME/source/neovim
    # make CMAKE_BUILD_TYPE=RelWithDebInfo
    # sudo make install
}

#@ 
function _touch_local () {
    #
    # @Description  local config
    # @params       
    # @Example      _touch_local
    # @Reference    
    #

    mkdir -p $HOME/.config/local
    touch $HOME/.config/local/hotstation $HOME/.config/local/local.zsh
}

#@ install
function install_wokwi () {
    #
    # @Description  wokwi cli
    # @params       
    # @Example      wokwi install
    # @Remarks      token has to be prepared(https://wokwi.com/dashboard/ci).
    # @Reference    https://github.com/wokwi/wokwi-cli
    #               https://wokwi.com/dashboard/ci
    #

    curl -L https://wokwi.com/ci/install.sh | sh
}

#@ raspi
function settings_samba () {
    #
    # @Description  samba install
    # @params       
    # @Example
    # @Remarks      for raspberry pi 
    # @Reference    https://child-programmer.com/rp-shared-folder-m/
    #

    ####################
    #   raspberry pi settings
    ####################
    sudo apt update;
    sudo apt upgrade;
    sudo apt install -y samba samba-common-bin
    sudo nano /etc/samba/smb.conf /etc/samba/smb.conf_backupdata

    # [pi]                                  # 共有フォルダの名前
    # comment = RaspberryPi-shared-folder   # コメント自由記述
    # path = /home/bucchiman/               # 共有フォルダのパスを指定する
    # guest ok = no                         # ゲストアカウント（パスワード不要）で接続を許可するかどうか。
    # read only = no                        # 読み取り専用かどうか。書き込みもしたい場合は、no
    # force user = pi                       # ファイル操作を、ユーザー「pi」 によって実行。

    sudo smbpasswd -a bucchiman   # set password
    sudo systemctl restart smbd
    sudo systemctl status smbd

    ###################
    #   mac
    ###################
    # finder - move - connect server
    # smb://raspberrypi (smb://[ip address/domain name])

}

#@ raspi
function setup_raspberrypi4 () {
    #
    # @Description  setup raspberry pi 4
    # @params       
    # @Example      
    # @Reference    
    #

    sudo apt-get install -y fuse
}

#@ example
function _example_wokwi () {
    #
    # @Description  example esp32
    # @params       
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    git clone https://github.com/wokwi/esp-idf-hello-world
    cd esp-idf-hello-world
    wokwi-cli .
}

#@ $2 install
function install_fzf () {
    #
    # @Description  install fzf for local user
    # @params
    # @Example      install_fzf
    # @Reference    https://github.com/junegunn/fzf#installation
    #

    local install_place
    if [[ $# == 0 ]]; then
        mkdir -p $HOME/source
        install_place=$HOME/source/fzf
        bin_place=$HOME/bin/fzf
    else
        install_place=$1
        bin_place=$2
    fi

    git clone --depth 1 https://github.com/junegunn/fzf.git $install_place
    $install_place/install
    ln -sf $install_place/bin/fzf $bin_place
}

#@ install
function install_bat () {
    #
    # @Description  install batcat
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

}

#@
function _attach_dotfiles () {
    #
    # @Description  attach dotfiles (for only 8ucchiman)
    # @params
    # @Example      attach_dotfiles
    # @Remarks      dotfiles: git@github.com:Bucchiman/dotfiles.git
    # @Reference
    #

    git clone --recursive git@github.com:Bucchiman/dotfiles.git $HOME/dotfiles
}

#@
function switch_dev () {

}

#@ archive
function array_fzf () {
    #
    # @Description  array_fzf
    # @params       $1: array
    #               $2: preview
    # @Example      local reults=`array_fzf "${platform[*]}"`
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    local array=($(echo $1))
    echo $(printf '%s\n' "${array[@]}" | fzf --preview="$2" --preview-label='' --height 100% )
}

#@ archive
function file_fzf () {
    #
    # @Description  itemize file fzf
    # @params       $1: file
    # @Example      file_fzf local_commands_history
    # @Reference    
    #

    echo $(cat $1 | fzf --height 100% )
}

#@ archive
function ls_fzf () {
    #
    # @Description  ls fzf
    # @params       $1: any path
    # @Example      ls_fzf $HOME/mywork/projects
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #
    echo $(/bin/ls -1 $1 | fzf --height 100%)
}

# function function_lst () {
#     #
#     # @Description  awk pattern with variable
#     # @params       : command a
#     #               : command b
#     # @Example
#     #
#     # @Reference    https://stackoverflow.com/questions/39384283/how-to-match-a-pattern-given-in-a-variable-in-awk
#     #               https://www.rasukarusan.com/entry/2019/04/30/000000
#     #
# 
#     file=$1
#     function_lst=($(awk -v pattern=$2 '$0 ~ pattern' $file))
# }
# 
# function func_lst() {
#     #
#     # @Description  command a & command b
#     #               background command a
#     #               foreground command b
#     # @params       : command a
#     #               : command b
#     # @Example
#     # @Reference: https://www.rasukarusan.com/entry/2019/04/30/000000
#     #
# 
#     local func=$(
#        typeset -f \
#        | grep ".*() {$" \
#        | grep "^[a-z_]" \
#        | tr -d "() {"   \
#        | fzf --height 100% --preview "source ~/Bmods; typeset -f  {}"
#    )
#     if [ -z "$func" ]; then
#         return
#     fi
#     typeset -f $func
# }

#@
function get_function_lst () {
    #
    # @Description  Get function list of a shell script
    # @params       $1: Directory
    # @Example      function_lst=`get_function_lst $HOME/Bmods`
    # @Remarks      hit ONLY "function" keywords
    # @Reference    
    #

    local function_lst=($(awk '/^function/{print $2}' $1))
    echo $function_lst
    #local target_function=`array_fzf "${function_lst[*]}" "cat $HOME/"`
    # local target_function=`printf '%s\n' "${function_lst[@]}" | fzf --preview-label="howto" --preview='grep -A 6 {} $HOME/Bmods' --height 100%`
    # eval "${target_function}"
}

#@
function get_target_function () {
    #
    # @Description  Get target function from function list
    # @params       $1: function list
    #               $2: script file
    # @Example      target_function=`get_target_function ${function_lst[*]}`
    # @Reference
    #
    local function_lst=($(echo $1))
    #echo "function_lst: $function_lst"
    #echo "script file:  $2"
    local target_function=`printf '%s\n' "${function_lst[@]}" | fzf --preview-label="howto" --preview="grep -B 1 -A 20 {} $2" --height 100%`
    echo $target_function

}

#@
function choose_local_function () {
    #
    # @Description  choose target function from local script
    # @params       $1: script file
    # @Example      local target_function=`choose_local_function $BASE_DIR/$0`
    # @Reference
    #

    local function_lst=`get_function_lst $1`
    local target_function=`get_target_function $function_lst[*] $1`
    echo $target_function
}

#@
function choose_Bmods_function () {
    #
    # @Description  choose target function from Bmods
    # @params       
    # @Example      local target_function=`choose_Bmods_function`
    # @Reference
    #

    local function_lst=`get_function_lst $HOME/Bmods`
    local target_function=`get_target_function $function_lst[*] $HOME/Bmods`
    echo $target_function
}

#@
function echo_Bmods_function_lst () {
    #
    # @Description  print function list of Bmods (for mainly debug)
    # @params       
    # @Example      echo_Bmods_function_list
    # @Remarks      hit ONLY "function" keyword
    # @Reference
    #
    awk '/^function/{print $2}' $HOME/Bmods
}


typeset -a MODULE_lst
typeset -A DOTFILES_SUBMODULES
typeset -A MYWORK_lst
#@
function set_variables () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    
    #

    echo "******************************"
    echo "* set_variables              *"
    echo "******************************"
    BASE_DIR=$PWD
    DOTFILES=$HOME/dotfiles/
    SAMPLE=$HOME/.config/sample/
    TMP=/tmp/8ucchiman/
    BMODS_PATH=$HOME/Bmods
    machine=`uname -s`
    # Reference: https://qiita.com/ttakuya50/items/085bea9176006016e593
    # MODULE_lst=(
    #     _debug
    #     fuzzy_settings
    #     default
    #     show_cmd_history
    #     load_local
    #     specific_scripts_function_lst
    # )
    #MODULE_lst = make_function_lst $HOME/gmods function zsh
    DOTFILES_SUBMODULES=(
        onelines            .config/lib/onelines
        csharp              .config/lib/codes/csharp
        c                   .config/lib/codes/c
        cpp                 .config/lib/codes/c++
        rust                .config/lib/codes/rust
        python              .config/lib/codes/python
        assembler           .config/lib/codes/assembler
        lua                 .config/lib/codes/lua
        cuda                .config/lib/codes/cuda
        IoT                 .config/lib/codes/IoT
        shell               .config/lib/codes/shell
    )
    # for value in ${(v)DOTFILES_SUBMODULES}; do
    #     echo $value
    # done
    # MYWORK_lst=(
    #     slam                # path
    #     maestro             # path
    #     speedestimation     # path
    # )
}

#@
function attach_mywork () {
    #
    # @Description  clone myworks (for only 8ucchiman)
    # @params       
    # @Example      attach_mywork
    # @Remarks      git@gitlab.com:8ucchiman/mywork.git
    # @Reference    
    #

    $(cd $HOME/; git clone --recursive git@gitlab.com:8ucchiman/mywork.git)
}

#@
function run_mywork () {
    #
    # @Description  mywork projects running
    # @params       
    # @Example      run_mywork
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    $(cd $HOME/mywork; ./Brun Lchoose_project)
}

#@
function mywork_menue () {
    cd $HOME/mywork; ./Brun
}


#@
function setup_environment () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

    # ln -sf $HOME/dotfiles/.config/pockets/shell/Bmods Bmods
}

#@ archive
function _debug () {
    #
    # @Description  Check Bmods path!!!
    # @params       
    # @Example
    # @Reference    
    #

    echo "8ucchiman was here!!"
}

#@ $1
function add_submodules () {
    #
    # @Description  Add submodules for main repository
    # @params       $1: repository url
    # @Example
    # @Reference    
    #

    git submodule add $1
}

#@
function show_samples () {
    #
    # @Description  Show sample images, videos, gifs, or texts
    # @params
    # @Example      show_samples
    # @Reference    
    #

    fuzzy_settings
    $(cd $SAMPLE; fzf)
    # echo $sample
}


#@
function show_cmd_history () {
    #
    # @Description  show .zhistory
    # @params       
    # @Example      show_cmd_history
    # @Reference    
    #

    file_fzf $HOME/.zhistory
}

#@
function run_submodule () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #


    #
    # toDo!!!!!!!!! my work
    #
    local target_submodule=`ls_fzf `
}

#@
function run_python () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #


    #
    # toDo!!!!!!!!! my work
    #
    #
   
}

#@
function run_c () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #



    #
    # toDo!!!!!!!!! my work
    #
    #
   
}

#@
function run_cpp () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #



    #
    # toDo!!!!!!!!! my work
    #
    #

}

#@
function run_rust () {


    #
    # toDo!!!!!!!!! my work
    #
    #

}

#@
function run_csharp () {
    #
    # toDo!!!!!!!!! my work
    #
    #

}

#@
function run_csharp () {
    #
    # toDo!!!!!!!!! my work
    #
    #

}

#@
function update_dotfiles () {
    #
    # @Description  update dotfiles
    # @params       
    # @Example      update_dotfiles
    # @Reference    
    #


    cd $DOTFILES
    git fetch origin dev
    git merge origin/dev
    for value in ${(v)DOTFILES_SUBMODULES}; do
        cd $DOTFILES/$value
        git fetch origin dev
        git merge --no-edit origin/dev
    done
    source $HOME/.zshrc
}

#@
function gulliver_code_rsync () {
}

#@
function _load_mywork_submodules () {
    
}

#@
function fuzzy_settings () {
    #---------------#
    #   fzf & ag    #
    #---------------#
    # fzf から the_silver_searcher (ag) を呼び出すことで高速化
    # fzf の キーバインド
    #if [ -e /opt/local/share/fzf/shell/key-bindings.zsh ]; then
    #    source /opt/local/share/fzf/shell/key-bindings.zsh
    #fi
    
    if [ -e $HOME/.fzf/shell/completion.zsh ]; then
        source $HOME/.fzf/shell/completion.zsh
    fi
    
    # fzf の 補完設定
    #if [ -e /opt/local/share/fzf/shell/completion.zsh ]; then
    #    source /opt/local/share/fzf/shell/completion.zsh
    #fi
    
    if _has fzf && _has ag; then
        export FZF_DEFAULT_COMMAND='ag --nocolor -g ""'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
        export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND"
        export FZF_COMMON_MYOPTS="--height 40% --layout=reverse --multi"
        export FZF_DEFAULT_OPTS="$FZF_COMMON_MYOPTS" # --preview 'bat --color=always {} --style=plain'"
        export FZF_CTRL_T_OPTS="$FZF_COMMON_MYOPTS" # --bind 'ctrl-y:execute-silent(echo {} | pbcopy)+abort' --border --preview 'bat --color=always {}'"
    fi

}

#@
function load_local () {
    #
    # TL;DR:        load local a file.zsh
    #
    #
    yn=`check_file_exist $1`
    if [[ $yn == "y" ]]; then
        source $1
    else
        echo "not exist local file"
    fi
}

#@
function font_settings () {
    #
    # show config?
    #     $ cat /etc/fonts/fonts.conf
    #
    # Reference: https://zenn.dev/hanaasagi/articles/9e428f0c9594a6
    #
    if [[ -e $HOME/.fonts ]]; then

    else
        ln -sf $HOME/dotfiles/.config/fonts $HOME/.fonts
    fi
    fc-cache -f -v
}

#@
function link_all () {
    #
    # @Description  link all files at one time
    # @params       $1: pattern
    # @return 
    # @Example      link_all $HOME/source/go/bin
    # Reference:    https://qiita.com/real_yaruo/items/0a1b4a88cfd5f27f062d
    #

    ls $1 | xargs -I{} ln -s {} {}
}

#@
function anaconda () {
}

#@
function clone_testrepository () {
    $(cd $TMP; git clone git@github.com:Bucchiman/test.git)
    #git clone https://github.com/Bucchiman/test.git
}

#@
function myawk () {
    """
        
    """
}

#function _assert() {
#    #
#    # $1: 条件式
#    # $2: 条件式がFalseの時に出力するメッセージ
#    # Reference: https://qiita.com/nannoki/items/15004992b6bb5637a9cd
#    #
#    eval $1
#    if [[ $? == 0 ]]; then
#        echo "great work!!!"
#    else
#        echo $2
#    fi
#}
#
#function test_add () {
#    _assert "$1"
#}

# function _assert () {
#     expected="$2"
#     input="$3"
# 
# 
#     ./9cc "$input" > tmp.s
#     cc -o tmp tmp.s
#     ./tmp
#     actual="$?"
# 
#     if [[ "$actual" == "$expected" ]]; then
#         echo "$input => $actual"
#     else
#         echo "$input => $expected expected, but got $actual"
#         exit 1
#     fi
# }


#@
function _assert () {
    #
    # @Description  command a & command b
    #               background command a
    #               foreground command b
    # @params       : command a
    #               : command b
    # @Example
    # @Reference    https://qiita.com/egawa_kun/items/714394609eef6be8e0bf
    #

}



#assert 0 0
#assert 42 42

#echo OK

#@
function gutils_tic_toc () {
    #
    # Description:  Gutils tictoc
    # @params       $1: pattern
    # @return 
    # @example
    #               $ tic
    #               $ toc
    # Reference:    https://qiita.com/real_yaruo/items/0a1b4a88cfd5f27f062d
    #
    
}


#@
function georgia_omscs () {
    #@ nest
    function matrials () {
        local -A material_lst=(
            apply           https://omscs.gatech.edu/program-info/application-deadlines-process-requirements
            zenn01          https://zenn.dev/magurotuna/articles/georgia-tech-omscs
            zenn02          https://zenn.dev/kakeami/articles/617efe3bf9841d
            zenn02_github   https://kakeami.github.io/road-to-gatech/
            zenn03_文系     https://zenn.dev/tofu511/articles/49b81ec2b6883e
            sugita          https://lapras.com/public/toshi0607
            yusuke_         https://github.com/magurotuna
            prerequisite    https://ja.takp.me/posts/how-i-was-accepted-to-georgia-tech-omscs/
        )
    }

    #@ nest
    function prerequisite () {
        local -a lst=(
            resume
            大学の成績証明書
            卒業証明書
            TOEFL_iBT
            statement_of_purpose
            recommendation_three
        )
    }

    #@ nest
    function deadline () {
        local -A sched=(
            spring      july_01st
            automn      march_01st
        )
    }
}

#@ $2
function create_remote_repository () {
    #
    # @Description  create remote repository in github/gitlab
    # @params       $1: github | gitlab
    #               $2:
    # @Example
    # @Reference    
    #

    local target_platform
    local project_name
    if [[ $# == 0 ]]; then
        local -a platforms=(
            github
            gitlab
        )
        target_platform=`array_fzf "$platforms[*]"`
        echo -n "project name> "
        read project_name
    else
        target_platform=$1
        project_name=$2
    fi
    if [[ $target_platform == "github" ]]; then
        gh repo create $project_name --private --add-readme
    else
        glab repo create $project_name --private --readme --defaultBranch master
    fi

}



# #@
# function default () {
#     #
#     # this is default setting
#     # you can run this function without no arguments.
#     #
#     echo "******************************"
#     echo "* default                    *"
#     echo "******************************"
#     echo "this is default setting"
#     echo "you can run this function without no arguments."
# }

#@
function search () {
    local load_readme=$(cd $HOME/.config/lib/readme; /usr/bin/find . -type f | fzf --height 100% )
}

#@
function keywords_searcher () {
    local -a tmp=($(awk '/#@/{$1="";print}' $BMODS_PATH))
    local -a keywords_lst=(${(u)tmp[@]})
    local target_keywords=`array_fzf "${keywords_lst[*]}"`
    echo $target_keywords
}





#######################################
#@ MAIN
function main () {
    set_variables
    fuzzy_settings
    if [[ $@ == "" ]]; then
    #    #
    #    # source modules
    #    # $ source Bmods
    #    #
    #elif [[ $@ == "." ]]; then
        # array_of_lines=("${(@f)$(my_command)}")
        # Reference: https://unix.stackexchange.com/questions/29724/how-to-properly-collect-an-array-of-lines-in-zsh
        # Reference: https://stackoverflow.com/questions/15691942/print-array-elements-on-separate-lines-in-bash
        # printf '%s\n' "${my_array[@]}"
        local target_func=`choose_Bmods_function`
        # echo $target_func
        eval ${target_func}
    else
        eval $@
    fi
}

# function _usage() {
#     echo "Usage: Bmods -B"
#     exit 1
# }

# if [[ $# = 0 ]]
# then
#     echo No arguments or options
#     exit 1
# fi

# while getopts b OPT
# do
#     case j in
#         b) echo hello; main_flag=1;;
#         :|\?) _usage;;
#     esac
# done

#if [[ $main_flag == 1 ]]; then
#    main
#fi

#ME=$0
#main $@
#######################################



#######################################
# 2023-10-28 18:59:55
# simply DEBUG
#######################################
# main @

#######################################

return
