#!/bin/zsh
#
# FileName:     RUN
# Author:       8ucchiman
# CreatedDate:  2024-06-03 11:30:33
# LastModified: 2024-06-13 13:48:24
# Reference:    8ucchiman.jp
# Description:  ---
# CHANGELOG:
#               2024-06-13 13:30:50     return log file
#               2024-06-13 13:12:52     add suffix option
#


# Function to log messages to a file
function log_message () {
    local log_file="$1"
    shift
    local message="$*"
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    echo "${timestamp} - ${message}" | tee -a "${log_file}"
}

# Function to log environment information
function log_env_info () {
    local log_file="$1"
    local mem_total=$(awk '/MemTotal/ {print $2}' /proc/meminfo)

    {
        echo "OS: $(uname -s) $(uname -r)"
        echo "CPU: $(uname -p)"
        echo "Memory: $((mem_total / 1024 / 1024)) GB"
        echo "Process ID: $$"
    } | tee -a "${log_file}"
}

# Function to log CPU/GPU occupancy
function log_occupancy () {
    local log_file="$1"
    local cpu_count=$(nproc)
    {
        echo "CPU Count: ${cpu_count}"
        echo "CPU Occupancy: $(top -bn1 | awk 'NR>7{s+=$9} END {print s}') %"
    } | tee -a "${log_file}"

    if command -v nvidia-smi &> /dev/null; then
        gpu_count=$(nvidia-smi --query-gpu=name --format=csv,noheader | wc -l)
        # Loop through each GPU and get the required information
        for ((i=0; i<$gpu_count; i++)); do
            # Get GPU name, total memory, used memory, and free memory
            gpu_info=$(nvidia-smi --query-gpu=name,memory.total,memory.used --format=csv,noheader,nounits --id=$i)
            name=$(echo $gpu_info | cut -d',' -f1)
            total=$(echo $gpu_info | cut -d',' -f2)
            used=$(echo $gpu_info | cut -d',' -f3)

            # Calculate occupancy percentage
            occupancy=$(awk "BEGIN {printf \"%.2f\", $used / $total * 100}")

            {
                echo "ID: $i GPU($name), Total memory[$total MiB]"
                echo "    $used MiB / $total MiB ($occupancy % occupancy)"
            } | tee -a "${log_file}"
        done
        # Get CUDA version
        cuda_version=$(nvcc --version | grep -o "release [0-9.]*" | awk '{print $2}')
        echo "CUDA Version: $cuda_version" | tee -a "${log_file}"
    fi
}

function timestamp_to_milliseconds() {
    local timestamp="$1"
    date -d "$timestamp" +%s%3N
}

function main () {
    # Parse arguments
    local pick=false
    local suffix=""
    local cmd_args=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --pick)
                pick=true
                shift
                ;;
            --suffix)
                suffix="_$2"
                shift 2
                ;;
            *)
                cmd_args+=("$1")
                shift
                ;;
        esac
    done

    # Main script
    log_dir="/tmp/logs"
    current_date=$(date "+%Y_%m_%d_%H_%M_%S")
    log_file="${log_dir}/${current_date}${suffix}.log"
    mkdir -p "${log_dir}"
    touch "${log_file}"
    log_env_info "${log_file}"
    log_occupancy "${log_file}"
    if [[ "${#cmd_args[@]}" -ne 0 ]]; then
        log_message "${log_file}" "Command:" "${cmd_args[@]}"
        start_time=$(date +"%Y-%m-%d %H:%M:%S.%3N")
        echo "Running start time: $start_time" | tee -a "${log_file}"
        # Run the command and log its output
        "${cmd_args[@]}" 2>&1 | tee -a "${log_file}"
        end_time=$(date +"%Y-%m-%d %H:%M:%S.%3N")
    fi
    # Log end time
    echo "Running end time: $end_time" | tee -a "${log_file}"

    # Calculate and log the time elapsed
    start_milliseconds=$(timestamp_to_milliseconds "$start_time")
    end_milliseconds=$(timestamp_to_milliseconds "$end_time")
    elapsed_milliseconds=$((end_milliseconds - start_milliseconds))
    elapsed_time=$(printf "%d.%03d seconds" $((elapsed_milliseconds/1000)) $((elapsed_milliseconds%1000)))
    echo "Time elapsed: $elapsed_time" | tee -a "${log_file}"

    # Copy log file to ./logs/ if --pick is specified
    if $pick; then
        mkdir -p "./logs"
        cp "${log_file}" "./logs/"
    fi

    # Print the log file path
    echo "Log file created at: ${log_file}"
}

# eval $@
main "$@"
